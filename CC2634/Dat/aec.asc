CP_VRS AI: 13.1 DBGEN: 13.0 Conv expand DATE: Thu Apr 15 15:24:36 1999
////
CP_STR global TYPE2.DTY SIZE: 1458 TIME: 542920310 = "02/28/96 09:51:22"
...STR TYPE
...STR   (* ---------------- ESI specific data structures: ---------- *)
...STR 
...STR   ESI_xtime:       (* Zeitstempel *)
...STR     STRUCT
...STR       milsekh:     BYTE;        (* data bytes *)
...STR       milsekl:     BYTE;        (* data bytes *)
...STR       min:         BYTE;        (* data bytes *)
...STR       std:         BYTE;        (* data bytes *)
...STR       tag:         BYTE;        (* data bytes *)
...STR     END_STRUCT;
...STR 
...STR   TEL_Data:        (* Telegramm-Daten *)
...STR     STRUCT
...STR       data:        ARRAY [1..4] OF BYTE; (* data bytes *)
...STR       stamp:       ESI_Xtime;            (* Zeitstempel *)
...STR     END_STRUCT;
...STR 
...STR   ESI_xData:       (* Data of ESI *)
...STR     STRUCT
...STR       data:        ARRAY [1..9] OF BYTE; (* data bytes *)
...STR     END_STRUCT;
...STR 
...STR 
...STR   (* ---------------- specific data structures: (Hruschka) ---------- *)
...STR 
...STR   DDX_Struc:       (* Stuktur fuer DDI/DDO *)
...STR     STRUCT
...STR       byte1:       BYTE;   (* Byte 1 *)
...STR       byte2:       BYTE;   (* Byte 2 *)
...STR       byte3:       BYTE;   (* Byte 3 *)
...STR       byte4:       BYTE;   (* Byte 4 *)
...STR     END_STRUCT;
...STR 
...STR   DDX_Array:       (* Struktur fuer DDI/DDO *)
...STR     STRUCT
...STR       data:        ARRAY [1..4] OF BYTE;   (* Byte Array *)
...STR     END_STRUCT;
...STR 
...STR   ACI_Array:       (* Struktur fuer ACI *)
...STR     STRUCT
...STR       data:        ARRAY [1..9] OF WORD;   (* WORD Array *)
...STR     END_STRUCT;
...STR 
...STR   ACO_Array:       (* Struktur fuer ACO *)
...STR     STRUCT
...STR       data:        ARRAY [1..4] OF WORD;   (* WORD Array *)
...STR     END_STRUCT;
...STR 
...STR END_TYPE
...STR 
...STR 
CP_STR local 
////
CL_DFB mainDFB C:\DFB\ AEC "04/15/99 10:13:40" TEXT:
CP_DFB "AEC" HEIGHT/WIDTH: 30 9 FBTK_DFB "04/15/99 10:13:40" TEXT:
...TXF To use AEC920 00 you have to define a Input and a Output register
...TXT area (Start3x, Start4x). The DFB works with this register area. The DFB
...TXT will transfer Bits immediatly, Bytes and words are transfered only with
...TXT a rising edge on Input  'send' from the input registers to the output
...TXT register area (4x...).
...TXT With the parameter 'counter' you can select either counter 1 or 2 for the
...TXT transfered data. (counter = 1: counter 1, counter = 2: counter 2).
...TXT 
...TXT Caution: For correct function the DFB needs a pulse on input  'send'.
...TXT              For this,  you can use the FB R_TRIG.
...TXT 
...TXT The Input-Data- structure 'par_arr' contains the data record  'ratioNo'
...TXT and  'parameter value'. For every data record are 3 words reserved.
...TXT You can store max  10 data records into the  'par_arr'.
...TXT 
...TXT Structure: 1. word: ratioNo
...TXT                2. word: parameter value LOW
...TXT                3. word: parameter value HIGH
...TXT 
...TXT You can define the number of transfered data records with 'first_bl' and
...TXT 'tot_blk' . 'first_bl' defines the first data record to send, 'tot_blk' defines
...TXT the number of all data records to send.
...TXT 
...TXT e.g: first_bl = 3 und tot_blk = 2 means, the 3.data record (word 7...9)
...TXT       and the 4. data record (word 10..12) in the data structure  'par_arr'
...TXT       will be transfered.
...TXT 
...TXT The DFB can only transfer data records in a hole block. After succesful
...TXT transfer the output 'ready' is high.
...TXT 
...TXT For further informations see User Manual 870 USE 008 00.
...TXT 
...TXT -----------------------------------------------------------------------------------------------------
...TXT 
...TXT Für die AEC920 muß je ein Registerfeld für Ein- und Ausgabe (Start3x,
...TXT Start4x) reserviert werden, in das der DFB die Parameter übertragen
...TXT kann. Dabei werden Bits sofort, Bytes aber erst mit einer positiven
...TXT Flanke am Eingang 'send' zum Registerfeld übertragen. Mit dem Para-
...TXT meter 'counter' können die einzelnen Daten wahlweise an Zähler 1
...TXT oder 2 gesendet werden (counter = 1: Zähler 1, counter = 2: Zähler 2).
...TXT 
...TXT ACHTUNG: Für die korrekte Funktion benötigt der DFB eine Puls am
...TXT                  Eingang 'send'. Hierzu kann der FB R_TRIG benutzt
...TXT                  werden.
...TXT 
...TXT In der Datenstruktur 'par_arr' am Eingang des DFB's trägt man die
...TXT Daten 'ratioNo' und 'parameter value' ein. Für jeden Parametersatz
...TXT sind 3 Worte vorgesehen; 10 Parametersätze sind maximal möglich.
...TXT 
...TXT Parametersatz: 1. Wort: ratioNo
...TXT                       2. Wort: parameter value LOW
...TXT                       3. Wort: parameter value HIGH
...TXT 
...TXT Die Anzahl der zu übertragenden Datensätze geben 'first_bl' und
...TXT 'tot_blk' vor. 'first_bl' steht für den ersten zu übertragenden Parameter-
...TXT satz, 'tot_blk' für die Anzahl aller zu übertragenden Parametersätze.
...TXT 
...TXT z.B.: first_bl = 3 und tot_blk = 2
...TXT         Das bedeutet, der 3. und 4. Parametersatz in der Datenstruktur
...TXT         'par_arr' wird übertragen.
...TXT 
...TXT Der DFB kann nur nacheinander liegende Parametersätze zum
...TXT Registerfeld der AEC920 übertragen. Ist die Übertragung beendet, wird
...TXT der Ausgang 'ready' aktiv (=1 Signal).
...TXT 
...TXT Weitere Infos siehe Benutzerhandbuch 870 USE 008 02.
...TXT 
CP_STR global TIME: 0x764e5c2000000000 = "02/28/96 09:51:22"
...STR TYPE
...STR   (* ---------------- ESI specific data structures: ---------- *)
...STR 
...STR   ESI_xtime:       (* Zeitstempel *)
...STR     STRUCT
...STR       milsekh:     BYTE;        (* data bytes *)
...STR       milsekl:     BYTE;        (* data bytes *)
...STR       min:         BYTE;        (* data bytes *)
...STR       std:         BYTE;        (* data bytes *)
...STR       tag:         BYTE;        (* data bytes *)
...STR     END_STRUCT;
...STR 
...STR   TEL_Data:        (* Telegramm-Daten *)
...STR     STRUCT
...STR       data:        ARRAY [1..4] OF BYTE; (* data bytes *)
...STR       stamp:       ESI_Xtime;            (* Zeitstempel *)
...STR     END_STRUCT;
...STR 
...STR   ESI_xData:       (* Data of ESI *)
...STR     STRUCT
...STR       data:        ARRAY [1..9] OF BYTE; (* data bytes *)
...STR     END_STRUCT;
...STR 
...STR 
...STR   (* ---------------- specific data structures: (Hruschka) ---------- *)
...STR 
...STR   DDX_Struc:       (* Stuktur fuer DDI/DDO *)
...STR     STRUCT
...STR       byte1:       BYTE;   (* Byte 1 *)
...STR       byte2:       BYTE;   (* Byte 2 *)
...STR       byte3:       BYTE;   (* Byte 3 *)
...STR       byte4:       BYTE;   (* Byte 4 *)
...STR     END_STRUCT;
...STR 
...STR   DDX_Array:       (* Struktur fuer DDI/DDO *)
...STR     STRUCT
...STR       data:        ARRAY [1..4] OF BYTE;   (* Byte Array *)
...STR     END_STRUCT;
...STR 
...STR   ACI_Array:       (* Struktur fuer ACI *)
...STR     STRUCT
...STR       data:        ARRAY [1..9] OF WORD;   (* WORD Array *)
...STR     END_STRUCT;
...STR 
...STR   ACO_Array:       (* Struktur fuer ACO *)
...STR     STRUCT
...STR       data:        ARRAY [1..4] OF WORD;   (* WORD Array *)
...STR     END_STRUCT;
...STR 
...STR END_TYPE
...STR 
...STR 
CP_OPT 25 100 IEC NotAs LP
CL_FRM "E_P" ID_4 SHOW POSL 7 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "E_C" ID_5 SHOW POSL 8 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "EI_F" ID_6 SHOW POSL 10 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "Q1_3_F" ID_7 SHOW POSL 12 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "Q2_4_F" ID_8 SHOW POSL 14 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "MODE" ID_9 SHOW POSL 17 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
CL_FRM "D_B" ID_10 SHOW POSL 20 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "counter" ID_12 SHOW POSL 4 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
CL_FRM "E_CP" ID_13 SHOW POSL 9 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "O_config" ID_14 SHOW POSL 22 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
CL_FRM "Q1_3" ID_15 SHOW POSL 13 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "Q2_4" ID_16 SHOW POSL 15 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "first_bl" ID_18 SHOW POSL 26 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE INT TEXT:
CL_FRM "tot_blk" ID_19 SHOW POSL 27 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE INT TEXT:
CL_FRM "send" ID_21 SHOW POSL 5 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "L_ED" ID_22 SHOW POSL 23 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "ACT_VAL" ID_24 SHOW POSR 16 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE DINT TEXT:
CL_FRM "Q_1_3" ID_25 SHOW POSR 8 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "Q_2_4" ID_26 SHOW POSR 9 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "ECPP" ID_27 SHOW POSR 11 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "ECP" ID_28 SHOW POSR 12 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "PP" ID_29 SHOW POSR 13 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "RCVA" ID_30 SHOW POSR 14 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "error" ID_31 SHOW POSR 5 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
CL_FRM "status" ID_32 SHOW POSR 4 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
CL_FRM "SratioNo" ID_33 SHOW POSR 7 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
CL_FRM "ready" ID_35 SHOW POSR 19 FP_IO_OUTPUT FP_OUTP_CARRY_STATE FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "REF" ID_36 SHOW POSR 10 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "p_error" ID_38 SHOW POSR 18 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
CL_FRM "Start3x" ID_42 SHOW POSL 2 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE WordArr9 TEXT:
CL_FRM "Start4x" ID_43 SHOW POSR 2 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE WordArr9 TEXT:
CL_FRM "Start4xi" ID_44 SHOW POSL 3 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE WordArr9 TEXT:
CL_FRM "par_arr" ID_45 SHOW POSL 28 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE WordArr31 TEXT:
CL_FRM "Pres_Mod" ID_46 SHOW POSL 19 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
CL_FRM "CLOA" ID_47 SHOW POSL 24 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FFB "WORD_AS_BYTE" ANYPIN_NO FBTK_EFB HEIGHT/WIDTH: 5 9 "03/24/97 14:20:55" NR_FORMP: 3
VS_FRM "IN" SHOW POSL 2 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE WORD TEXT:
VS_FRM "LOW" SHOW POSR 2 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
VS_FRM "HIGH" SHOW POSR 3 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
VS_FFB "BYTE_TO_INT" ANYPIN_NO FBTK_EFB_FUNCT HEIGHT/WIDTH: 4 8 "03/24/97 14:20:55" NR_FORMP: 2
VS_FRM "IN" HIDE POSL 2 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
VS_FRM "OUT" HIDE POSR 2 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE INT TEXT:
VS_FFB "BYTE_TO_BIT" ANYPIN_NO FBTK_EFB HEIGHT/WIDTH: 11 8 "03/24/97 14:20:55" NR_FORMP: 9
VS_FRM "IN" SHOW POSL 2 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
VS_FRM "BIT0" SHOW POSR 2 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT1" SHOW POSR 3 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT2" SHOW POSR 4 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT3" SHOW POSR 5 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT4" SHOW POSR 6 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT5" SHOW POSR 7 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT6" SHOW POSR 8 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT7" SHOW POSR 9 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FFB "WORD_AS_DINT" ANYPIN_NO FBTK_EFB_FUNCT HEIGHT/WIDTH: 5 9 "03/24/97 14:20:55" NR_FORMP: 3
VS_FRM "LOW" SHOW POSL 2 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE WORD TEXT:
VS_FRM "HIGH" SHOW POSL 3 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE WORD TEXT:
VS_FRM "OUT" HIDE POSR 2 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE DINT TEXT:
VS_FFB "BIT_TO_WORD" ANYPIN_NO FBTK_EFB_FUNCT HEIGHT/WIDTH: 19 8 "03/24/97 14:20:55" NR_FORMP: 17
VS_FRM "BIT0" SHOW POSL 2 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT1" SHOW POSL 3 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT2" SHOW POSL 4 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT3" SHOW POSL 5 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT4" SHOW POSL 6 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT5" SHOW POSL 7 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT6" SHOW POSL 8 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT7" SHOW POSL 9 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT8" SHOW POSL 10 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT9" SHOW POSL 11 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT10" SHOW POSL 12 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT11" SHOW POSL 13 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT12" SHOW POSL 14 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT13" SHOW POSL 15 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT14" SHOW POSL 16 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT15" SHOW POSL 17 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "OUT" HIDE POSR 2 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE WORD TEXT:
VS_FFB "BIT_TO_BYTE" ANYPIN_NO FBTK_EFB_FUNCT HEIGHT/WIDTH: 11 8 "03/24/97 14:20:55" NR_FORMP: 9
VS_FRM "BIT0" SHOW POSL 2 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT1" SHOW POSL 3 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT2" SHOW POSL 4 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT3" SHOW POSL 5 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT4" SHOW POSL 6 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT5" SHOW POSL 7 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT6" SHOW POSL 8 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "BIT7" SHOW POSL 9 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BOOL TEXT:
VS_FRM "OUT" HIDE POSR 2 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
VS_FFB "BYTE_AS_WORD" ANYPIN_NO FBTK_EFB_FUNCT HEIGHT/WIDTH: 5 9 "03/24/97 14:20:55" NR_FORMP: 3
VS_FRM "LOW" SHOW POSL 2 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
VS_FRM "HIGH" SHOW POSL 3 FP_IO_INPUT FP_INP_NORMAL FP_LOC_OUTSIDE BYTE TEXT:
VS_FRM "OUT" HIDE POSR 2 FP_IO_OUTPUT FP_OUTP_NORMAL FP_LOC_OUTSIDE WORD TEXT:
CP_GV4 "eins" IEC_WORD_ID INIT: TRUE 16#0001 EXP: FALSE RET: TRUE READONLY: FALSE TEXT:
CP_GV2 "count" IEC_INT_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "config" IEC_WORD_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "blnr" IEC_INT_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "quit" IEC_BOOL_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "parr" IEC_INT_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "mpx_in" IEC_BYTE_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "mpx_out" IEC_BYTE_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "hilf2" IEC_BYTE_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "hilf" IEC_WORD_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "hilf1" IEC_WORD_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "BIT6_7" IEC_WORD_ID INIT: TRUE 16#FF3F EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "h_cnt" IEC_INT_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "hilf3" IEC_WORD_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "hilf4" IEC_WORD_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "h_ready" IEC_BOOL_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV4 "enable" IEC_WORD_ID INIT: TRUE 16#7F00 EXP: FALSE RET: TRUE READONLY: FALSE TEXT:
CP_GV4 "high" IEC_BYTE_ID INIT: TRUE 16#F0 EXP: FALSE RET: TRUE READONLY: FALSE TEXT:
CP_GV4 "low" IEC_BYTE_ID INIT: TRUE 16#0F EXP: FALSE RET: TRUE READONLY: FALSE TEXT:
CP_GVS "s1" SECT_CTRL INIT: FALSE 0 EXP: FALSE RET: TRUE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "confg1" IEC_BYTE_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "confg2" IEC_BYTE_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "res" IEC_BOOL_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GV2 "h_send" IEC_BOOL_ID INIT: FALSE 0 EXP: FALSE RET: FALSE READONLY: FALSE MAS: FALSE TEXT:
CP_GVS "s2" SECT_CTRL INIT: FALSE 0 EXP: FALSE RET: TRUE READONLY: FALSE MAS: FALSE TEXT:
CP_GVS "s3" SECT_CTRL INIT: FALSE 0 EXP: FALSE RET: TRUE READONLY: FALSE MAS: FALSE TEXT:
CP_SEC "s1" SECTK_F_SECTION LANG_ST SVB: FALSE ID: 1 CODE_IND: 1 TEXT:
CP__ST VAR
CP__ST WANDLE1, WANDLE2 : WORD_AS_BYTE;
CP__ST END_VAR
CP__ST  
CP__ST (* copy data structure *)
CP__ST Start4x := Start4xi;
CP__ST  
CP__ST (* init *)
CP__ST IF send THEN
CP__ST  p_error := 0;   (* parameter error *)
CP__ST  h_cnt   := 0;   (* internal counter *)
CP__ST  h_send  := 1;   (* internal send *)
CP__ST END_IF;
CP__ST  
CP__ST (* internal counter *)
CP__ST IF first_bl >= h_cnt THEN
CP__ST  blnr := first_bl;
CP__ST ELSE
CP__ST  blnr := h_cnt;
CP__ST END_IF;
CP__ST  
CP__ST (* int. address config. *)
CP__ST count := BYTE_TO_INT(IN:=counter);
CP__ST  
CP__ST (* answer of AEC920 *)
CP__ST WANDLE1(IN:=Start4xi[count+2]);
CP__ST mpx_in := WANDLE1.LOW AND 16#1F;
CP__ST WANDLE2(IN:=Start3x[count+2]);
CP__ST mpx_out := WANDLE2.LOW;
CP__ST  
CP__ST (* SratioNo *)
CP__ST CASE (BYTE_TO_INT(IN:=mpx_in)) OF
CP__ST  0..7,
CP__ST  16#B:    quit := (mpx_in=mpx_out);  (* ok *)
CP__ST  
CP__ST  8..16#A: quit := (mpx_in=mpx_out);
CP__ST           IF mpx_out=16#1F THEN      (* invalid *)
CP__ST            quit := 1;
CP__ST            p_error := 1;
CP__ST            Start4x[count+2]:=Start4xi[count+2] AND 16#FFE0; (* Kennziffer=0 *)
CP__ST           END_IF;
CP__ST  
CP__ST  16#C:    IF counter=1 THEN          (* 16#C *)
CP__ST            quit := (mpx_in=mpx_out);
CP__ST           ELSE                       (* invalid *)
CP__ST            quit := (mpx_out=16#1F);
CP__ST            p_error := 1;
CP__ST            Start4x[count+2]:=Start4xi[count+2] AND 16#FFE0; (* Kennziffer=0 *)
CP__ST           END_IF;
CP__ST  16#D..
CP__ST  16#1F:   quit := (mpx_out=16#1F);
CP__ST           p_error := 1;
CP__ST           Start4x[count+2]:=Start4xi[count+2] AND 16#FFE0; (* Kennziffer=0 *)
CP__ST END_CASE;
CP__ST  
CP__ST (* mode *)
CP__ST CASE (BYTE_TO_INT(IN:=mode)) OF
CP__ST  0,1,2,4..
CP__ST  16#0A:   res := 0;
CP__ST  
CP__ST  3,16#0B: p_error := 1;
CP__ST           res := 0;
CP__ST  16#0C..
CP__ST  16#0E:   res := 0;
CP__ST  
CP__ST  16#0F:   Start4x[count+2] := Start4xi[count+2] AND 16#FFE0; (* Kennziffer=0 *)
CP__ST           IF ((Start3x[count] AND eins)=1) THEN
CP__ST            blnr := first_bl + tot_blk;
CP__ST            res := 1;
CP__ST           END_IF;
CP__ST  16#1F..
CP__ST  16#FF:   p_error := 1;
CP__ST           res := 0;
CP__ST END_CASE;
CP__ST  
CP__ST (* output configuration *)
CP__ST confg1 := O_config & low;
CP__ST confg2 := O_config & high;
CP__ST  
CP__ST IF (((confg2=16#D0) AND (counter = 2)) OR
CP__ST    (  confg1>16#0D) OR (confg2>16#D0)) THEN
CP__ST  p_error := 1;
CP__ST  quit := 1;
CP__ST END_IF;
CP__ST  
CP__ST (* all parameters send *)
CP__ST h_ready := ((first_bl + tot_blk) = blnr);
CP__ST  
CP__ST IF (quit AND(NOT h_ready)) THEN
CP__ST  IF blnr > (first_bl + tot_blk) THEN
CP__ST   h_cnt := first_bl + tot_blk + 1;
CP__ST   h_send := 0;
CP__ST  ELSE
CP__ST   h_cnt := blnr + 1;
CP__ST  END_IF;
CP__ST ELSE
CP__ST  h_cnt := blnr;
CP__ST END_IF;
CP__ST  
CP__ST ready := (h_ready AND quit);
CP__ST  
CP__ST IF ready THEN
CP__ST  h_send := 0;
CP__ST END_IF;
CP__ST  
CP__ST (* pointer for par_arr *)
CP__ST parr := (blnr-1) *3;
CP_SEC "s2" SECTK_F_SECTION LANG_ST SVB: FALSE ID: 2 CODE_IND: 2 TEXT:
CP__ST VAR
CP__ST WANDLE10, WANDLE12 : BYTE_TO_BIT;
CP__ST WANDLE13 : WORD_AS_BYTE;
CP__ST END_VAR
CP__ST  
CP__ST (* read input *)
CP__ST  
CP__ST (* copy data structure *)
CP__ST (*Start4x := Start4xi;*)
CP__ST  
CP__ST (* int. address config. *)
CP__ST count := BYTE_TO_INT(IN:=counter);
CP__ST  
CP__ST (* configuration word *)
CP__ST hilf := BIT_TO_WORD(E_P,E_C,E_CP,EI_F,Q1_3_F,Q1_3,Q2_4_F,Q2_4,
CP__ST                     0,0,0,0,0,0,0,D_B);
CP__ST hilf1:= Start4xi[count] AND enable;
CP__ST  
CP__ST Start4x[count] := (hilf OR hilf1);
CP__ST  
CP__ST (* config bits *)
CP__ST hilf3 := BIT_TO_WORD(0,0,0,0,0,0,CLOA,L_ED,0,0,0,0,0,0,0,0);
CP__ST hilf4 := Start4xi[count+2] AND BIT6_7; (* L_ED ausmaskieren *)
CP__ST Start4x[count+2] := hilf3 OR hilf4;
CP__ST  
CP__ST (* Flanke *)
CP__ST IF (h_send AND (NOT res)) THEN
CP__ST  IF (quit AND (NOT ready)) THEN
CP__ST   WANDLE10(IN:=MODE);
CP__ST   WANDLE12(IN:=Pres_Mod);
CP__ST  
CP__ST (* Configuration word of counter 1 or 2 *)
CP__ST   Start4x[count] := BIT_TO_WORD(E_P, E_C, E_CP, EI_F,
CP__ST                                 Q1_3_F, Q1_3, Q2_4_F, Q2_4,
CP__ST                                 WANDLE10.BIT0, WANDLE10.BIT1,
CP__ST                                 WANDLE10.BIT2, WANDLE10.BIT3,
CP__ST                                 WANDLE12.BIT0, WANDLE12.BIT1,
CP__ST                                 WANDLE12.BIT2, D_B);
CP__ST  
CP__ST (* ratioNO *)
CP__ST   WANDLE13(IN:=par_arr[parr+1]);
CP__ST   hilf2 := (WANDLE13.LOW AND 16#3F) OR BIT_TO_BYTE(0,0,0,0,0,0,CLOA,L_ED);
CP__ST   config:= BYTE_AS_WORD(hilf2, O_config);
CP__ST  
CP__ST (* parameter value of counter *)
CP__ST   count := count+2;
CP__ST   Start4x[count] := config;             (* output config/ratioNO *)
CP__ST  
CP__ST   IF counter=1 THEN
CP__ST    Start4x[count+2] := par_arr[parr+2]; (* parameter value of counter 1 *)
CP__ST    Start4x[count+3] := par_arr[parr+3]; (* parameter value of counter 1 *)
CP__ST   ELSE
CP__ST    Start4x[count+3] := par_arr[parr+2]; (* parameter value of counter 2 *)
CP__ST    Start4x[count+4] := par_arr[parr+3]; (* parameter value of counter 2 *)
CP__ST   END_IF;
CP__ST  END_IF;
CP__ST END_IF;
CP_SEC "s3" SECTK_F_SECTION LANG_ST SVB: FALSE ID: 3 CODE_IND: 3 TEXT:
CP__ST VAR
CP__ST WANDLE20 , WANDLE21 : WORD_AS_BYTE;
CP__ST WANDLE22 : BYTE_TO_BIT;
CP__ST END_VAR;
CP__ST  
CP__ST (* write output *)
CP__ST  
CP__ST (* int. address config *)
CP__ST count := BYTE_TO_INT(IN:=counter);
CP__ST  
CP__ST (* Status word of counter *)
CP__ST WANDLE20(IN:=Start3x[count]);
CP__ST status := WANDLE20.HIGH;
CP__ST error  := WANDLE20.LOW;
CP__ST  
CP__ST (* SratioNo of counter *)
CP__ST WANDLE21(IN:=Start3x[count+2]);
CP__ST SratioNo := WANDLE21.LOW;
CP__ST  
CP__ST (* output status of counter *)
CP__ST WANDLE22(IN:=WANDLE21.HIGH);
CP__ST  
CP__ST Q_1_3 := WANDLE22.BIT0;
CP__ST Q_2_4 := WANDLE22.BIT1;
CP__ST REF   := WANDLE22.BIT3;
CP__ST ECPP  := WANDLE22.BIT4;
CP__ST ECP   := WANDLE22.BIT5;
CP__ST PP    := WANDLE22.BIT6;
CP__ST RCVA  := WANDLE22.BIT7;
CP__ST  
CP__ST (* actual value of counter *)
CP__ST IF counter=1 THEN
CP__ST  ACT_VAL := WORD_AS_DINT(LOW :=Start3x[count+4],
CP__ST                          HIGH:=Start3x[count+5]);
CP__ST ELSE
CP__ST  ACT_VAL := WORD_AS_DINT(LOW :=Start3x[count+5],
CP__ST                          HIGH:=Start3x[count+6]);
CP__ST END_IF;
////
CR_END *
